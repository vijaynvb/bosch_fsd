Microservice: 6
    1. Modularity -> 
    2. Autonomous -> versionings, single db for each service [SPF],
    3. Hide implementation details -> use any technology for implmeneting ur service ->  Rest API, HTTP, JSON 
    4. Stateless -> never use server side sessions, use client side session management -> Tokens[Jwt, OAuth] - cookies
    5. Automation -> support for CI/CD implementation -> Docker, .env file
    6. Observability -> supprot for monitoring your application -> express-actuator ->  /health, /metrics, /info 
        tools - splunk, promethos, graphana, fluentd, cloudwatch, analytics 

Rest Principles: 6 
    1. C/S -> pull request based application 
    2. Resources -> by identityfying the entites where we can perform CRUD Opertaions
    3. Cache -> 
    4. URL -> http [CRUD]
    5. stateless
    6. Hateos, interconnect resource representation

Python: 
    1. Baiscs of Rest API's
    2. FastAPI
    3. UVICorn
    4. Swagger
    5. path and query Params
    6. Model creation for validations -> pydantic -> serialization library -> json -> object -> json 
    7. Middleware -> 
        1. Custom Middlewares -> @app.middlewares("http")
        2. Built in -> app.add_middlewares("fastapi.TrustedHostMiddleware")
        3. third party -> app.add_middlewares("LogMiddlewares");
    8. application configurations
        1. python_dotenv -> .env 
    9. Project structure 
        1. File category -> grouping of the files wrt its technical implementations
        2. Module category -> group your file as per modules 
    10. example app 
    11. todo crud 
    12. Error Management 
        1. Exceptions
        2. Handle the Exceptions middlewares
    13. Unit Test 
        1. Endpoint testing -> TestClient 
        2. Functions -> Pytest 
    14. Authenticataion and Authorization
        1. secure the endpoints [Client validation, role based access RBAC]
    15. Observablity 
    16. database 
    17. deployments 


Implement a User Resource in the todo project with below fields 
    id: int
    name: str
    email: str
    password: str 
    isActive: boolean
and perform crud operations on the resource 
by following the project structure 